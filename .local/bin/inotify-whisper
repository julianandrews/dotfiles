#!/home/julian/.virtualenvs/inotify-whisper/bin/python
"""
Watch a directory for new audio files and transcribe them using OpenAI's Whisper model.

Usage:
    ./inotify_whisper.py --watch-dir /path/to/watch --output-dir /path/to/output
"""

import argparse
import inotify.adapters
import logging
import threading
import os
import queue
import sys
import time
import whisper

from typing import Optional


AVAILABLE_MODELS = whisper.available_models();

# Set up logging to print to console (systemd will capture this)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

error_queue = queue.Queue()


class WhisperWrapper:
    """Wrapper module around whisper to manage efficient loading and unloading of the model."""
    def __init__(self, model_name: str, language: str) -> None:
        self.model_name: str = model_name
        self.language: str = language
        self.model: Optional[whisper.Whisper] = None
        self.active_tasks: int = 0
        self.task_count_lock: threading.Lock = threading.Lock()
        self.model_lock: threading.Lock = threading.Lock()

    def load_model(self) -> None:
        """Loads the whisper model into memory if not already loaded."""
        with self.model_lock:
            if self.model is None:
                logger.info(f"Loading Whisper model '{self.model_name}'...")
                self.model = whisper.load_model(self.model_name)
                logger.info(f"Whisper model '{self.model_name}' loaded.")

    def unload_model(self) -> None:
        """Unload the whisper model from memory if loaded."""
        with self.model_lock:
            if self.model is not None and self.active_tasks == 0:
                del self.model
                self.model = None
                logger.info(f"Whisper model '{self.model_name}' unloaded.")

    def transcribe(self, file_path: str) -> str:
        """
        Transcribes the audio file at the given path and returns the transcription text.

        Args:
            file_path: Path to the audio file.

        Returns:
            str: The transcription text.

        Raises:
            RuntimeError: If the transcription result is invalid or missing the 'text' field.
        """
        with self.task_count_lock:
            self.active_tasks += 1
        self.load_model()

        try:
            with self.model_lock:
                if self.model is None:
                    raise RuntimeError("Whisper model is not loaded.")
                result = self.model.transcribe(file_path, fp16=False, language=self.language)
        finally:
            with self.task_count_lock:
                self.active_tasks -= 1
                if self.active_tasks == 0:
                    self.unload_model()

        transcription = result.get("text")
        if not isinstance(transcription, str):
            raise RuntimeError(f"Invalid transcription result: {result}")
        return transcription


def process_file(model_wrapper: WhisperWrapper, file_path: str) -> None:
    """
    Process an audio file by transcribing it and saving the transcription to the output directory.

    Args:
        model_wrapper: An instance of WhisperWrapper for transcribing audio.
        file_path: Path to the audio file to transcribe.

    Raises:
        RuntimeError: If the transcription fails or the output directory cannot be created.
    """
    try:
        # Transcribe the audio file
        transcription = model_wrapper.transcribe(file_path)

        # Create the output directory structure
        relative_path = os.path.relpath(os.path.dirname(file_path), args.watch_dir)
        output_subdir = os.path.join(args.output_dir, relative_path)
        os.makedirs(output_subdir, exist_ok=True)

        # Save the transcription
        output_file = os.path.join(output_subdir, f"{os.path.splitext(os.path.basename(file_path))[0]}.txt")
        with open(output_file, "w") as f:
            f.write(transcription)

        logger.info(f"Transcription saved to: {output_file}")
    except Exception as e:
        logger.error(f"Error processing {file_path}: {e}")
        error_queue.put(e)


def add_directory_to_watcher(watcher: inotify.adapters.Inotify, dir_path: str) -> None:
    watcher.add_watch(dir_path)
    logger.info(f"Added watch for directory: {dir_path}")


def is_visible_readable_file(file_path: str) -> bool:
    return os.path.isfile(file_path) and os.access(file_path, os.R_OK) and not file_path.startswith(".")


def parse_args():
    parser = argparse.ArgumentParser(description="Watch a directory for new audio files and transcribe them using Whisper.")
    parser.add_argument("--watch-dir", required=True, help="Directory to watch for new audio files.")
    parser.add_argument("--output-dir", required=True, help="Directory to save transcriptions.")
    parser.add_argument("--model", default="large", choices=AVAILABLE_MODELS, help="Whisper model to use (default: large).")
    parser.add_argument("--language", default="en", help="Language of the audio files (default: en).")
    return parser.parse_args()



if __name__ == "__main__":
    args = parse_args()

    # Set up inotify watcher
    logger.info(f"Starting inotify watcher on directory: {args.watch_dir}")
    inotify_watcher = inotify.adapters.Inotify()

    # Add the root watch directory
    add_directory_to_watcher(inotify_watcher, args.watch_dir)

    # Recursively add all existing subdirectories to the watcher
    for root, dirs, _ in os.walk(args.watch_dir):
        for dir_name in dirs:
            dir_path = os.path.join(root, dir_name)
            add_directory_to_watcher(inotify_watcher, dir_path)

    model_wrapper = WhisperWrapper(args.model, args.language)

    # Process events
    logger.info("Listening for new files and directories...")
    for event in inotify_watcher.event_gen():
        if event is not None:
            (_, type_names, path, filename) = event

            if "IN_DELETE" in type_names and "IN_ISDIR" in type_names:
                # Removed directory
                deleted_path = os.path.join(path, filename) if filename else path
                logger.info(f"Directory deleted: {deleted_path}")
            elif "IN_CREATE" in type_names and os.path.isdir(os.path.join(path, filename)):
                # New directory
                new_dir = os.path.join(path, filename)
                add_directory_to_watcher(inotify_watcher, new_dir)
                logger.info(f"New directory detected and added to watcher: {new_dir}")
            elif "IN_CLOSE_WRITE" in type_names or "IN_MOVED_TO" in type_names:
                # New file
                file_path = os.path.join(path, filename)
                if is_visible_readable_file(file_path):
                    logger.info(f"New file detected: {file_path}")
                    threading.Thread(target=process_file, args=(model_wrapper, file_path)).start()
        try:
            error = error_queue.get_nowait()
            while model_wrapper.active_tasks > 0:
                logger.info(f"Waiting for {model_wrapper.active_tasks} active tasks to complete...")
                time.sleep(1)
            logger.info("All tasks completed. Exiting with error.")
            sys.exit(1)
        except queue.Empty:
            pass
