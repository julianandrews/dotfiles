#!/home/julian/.virtualenvs/inotify-whisper/bin/python

import os
import argparse
import logging
import threading
import inotify.adapters
import whisper

# Parse command-line arguments
parser = argparse.ArgumentParser(description="Watch a directory for new audio files and transcribe them using Whisper.")
parser.add_argument("--watch-dir", required=True, help="Directory to watch for new audio files.")
parser.add_argument("--output-dir", required=True, help="Directory to save transcriptions.")
parser.add_argument("--model", default="large", help="Whisper model to use (default: large).")
parser.add_argument("--language", default="en", help="Language of the audio files (default: en).")

# Set up logging to print to console (systemd will capture this)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)


class WhisperWrapper:
    def __init__(self, model_name, language):
        self.model_name = model_name
        self.language = language
        self.model = None
        self.timer = None
        self.lock = threading.Lock()

    def unload_model(self):
        with self.lock:
            if self.model is not None:
                del self.model
                self.model = None
                logger.info(f"Whisper model '{self.model_name}' unloaded.")

    def transcribe(self, file_path):
        with self.lock:
            if self.timer is not None:
                self.timer.cancel()
            try:
                if self.model is None:
                    logger.info(f"Loading Whisper model '{self.model_name}'...")
                    self.model = whisper.load_model(self.model_name)
                    logger.info(f"Whisper model '{self.model_name}' loaded.")
                result = self.model.transcribe(file_path, fp16=False, language=self.language)
            finally:
                self.timer = threading.Timer(2, self.unload_model)
                self.timer.start()
            return result


def transcribe_audio(model_wrapper, file_path):
    try:
        # Transcribe the audio file
        result = model_wrapper.transcribe(file_path)
        transcription = result["text"]

        # Create the output directory structure
        relative_path = os.path.relpath(os.path.dirname(file_path), args.watch_dir)
        output_subdir = os.path.join(args.output_dir, relative_path)
        os.makedirs(output_subdir, exist_ok=True)

        # Save the transcription
        output_file = os.path.join(output_subdir, f"{os.path.splitext(os.path.basename(file_path))[0]}.txt")
        with open(output_file, "w") as f:
            f.write(transcription)

        logger.info(f"Transcription saved to: {output_file}")
    except Exception as e:
        logger.error(f"Error processing {file_path}: {e}")


def add_directory_to_watcher(watcher, dir_path):
    watcher.add_watch(dir_path)
    logger.info(f"Added watch for directory: {dir_path}")


if __name__ == "__main__":
    args = parser.parse_args()

    # Set up inotify watcher
    logger.info(f"Starting inotify watcher on directory: {args.watch_dir}")
    inotify_watcher = inotify.adapters.Inotify()

    # Add the root watch directory
    add_directory_to_watcher(inotify_watcher, args.watch_dir)

    # Recursively add all existing subdirectories to the watcher
    for root, dirs, _ in os.walk(args.watch_dir):
        for dir_name in dirs:
            dir_path = os.path.join(root, dir_name)
            add_directory_to_watcher(inotify_watcher, dir_path)

    model_wrapper = WhisperWrapper(args.model, args.language)

    # Process events
    logger.info("Listening for new files and directories...")
    for event in inotify_watcher.event_gen():
        if event is not None:
            (_, type_names, path, filename) = event

            if "IN_DELETE" in type_names and "IN_ISDIR" in type_names:
                # Removed directory
                deleted_path = os.path.join(path, filename) if filename else path
                logger.info(f"Directory deleted: {deleted_path}")
            elif "IN_CREATE" in type_names and os.path.isdir(os.path.join(path, filename)):
                # New directory
                new_dir = os.path.join(path, filename)
                add_directory_to_watcher(inotify_watcher, new_dir)
                logger.info(f"New directory detected and added to watcher: {new_dir}")
            elif "IN_CREATE" in type_names or "IN_MOVED_TO" in type_names:
                # New file
                file_path = os.path.join(path, filename)
                if os.path.isfile(file_path):  # Ensure it's a file, not a directory
                    logger.info(f"New file detected: {file_path}")
                    transcribe_audio(model_wrapper, file_path)
